# -*- coding: utf-8 -*-
"""Market Basket Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wllYfJaXfwOhZxzIGSQurb9niiPseBGk

## Libraries
"""

import numpy as np
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

"""## Loading the Data"""

data = pd.read_excel('market_analysis.xlsx',sheet_name='Chat Orders')
data.head()

"""## Data Cleaning"""

# Stripping extra spaces in the description
data['Cart'] = data['Cart'].str.strip()
 
# Dropping the rows without any invoice number
data.dropna(axis = 0, subset =['Order ID'], inplace = True)
data['Order ID'] = data['Order ID'].astype('str')
data['Order ID'] = data['Order ID'].replace('C','0', regex=True)

def category(x):
    if x in ['Biscoff Mochi Cookie','Cup C','Hella Nutella','Small Box of 5','Salty Oreo Cream Cheese','Pbj','Red Velvet Cream Cheese','Death By Chocolate','Large Box of 12','Vegan Dark Chocolate Valrhona','Cookie Gift Box','Vegan Peanut Butter Oreo','Soft cookies','Large box of 8','Small box of 5']:
        return('COOKIES')
    if x in ['Brownie Gift Box','Small Box of 9','Small box of 9', 'Double Box of 18','Double box of 18']:
        return('BROWNIES')
    if x in ['SLICES','Care Package']:
        return('SLICES')
    if x in ['Queen B','The Og Mooncakes','Mochi Mooncake Set','Butterfly Kisses', "Mother's Day Cookie Cake",'Love Is Love Bundle Set','Sweetheart','Ferrero Chocolate Tart','Young Coconut Cake','Very Berry Basque Cheesecake','Cup C Cookie Cake','Lady In Pink','Carrot Cream Cheese','Chocolate Pudding','Love Birds (set)','Blackout Chocolate Cake','Strawberry Kiss','Mixed Berry Cheesepie','Mayongchid Cheesepie (1lb)']:
        return('CAKES')
    if x in ['Nutty Lady', 'Mango Tango','Miss Sunshine','Icecream box of 6','Cookie Queen','Milk Candy', 'Cereal Killer','Sinful Sundae','Box of 6 icecreams','Fat Kid Froyo']:
        return('ICECREAMS')
    if x in ['Fetish','First Kiss','Banana Cheese','Banana Og','Banana Nutella','Banana Goes Nuts', 'Banana Ultimate Combo','Loaf Gift Box']:
        return('BANANA SERIES')
    else:
        return('OTHERS')

data['Category'] = data['Cart'].apply(category)

"""## Data Preparation"""

# Transactions done in the United Kingdom
basketpp = (data
          .groupby(['Order ID', 'Cart'])['Quantity']
          .sum().unstack().reset_index().fillna(0)
          .set_index('Order ID'))

basketcc = (data
          .groupby(['Order ID', 'Category'])['Quantity']
          .sum().unstack().reset_index().fillna(0)
          .set_index('Order ID'))

# Defining the hot encoding function to make the data suitable
# for the concerned libraries
def hot_encode(x):
    if(x<= 0):
        return 0
    if(x>= 1):
        return 1

## Encoding the dataset
basket_product = basketpp.applymap(hot_encode)
basket_category = basketcc.applymap(hot_encode)
basketp = basket_product
basketc = basket_category

basketp.to_excel('market_analysis.xlsx')
basketc.to_excel('market_analysis.xlsx')



"""##  Apriori Algorithm -  product level"""

# Building the model
frq_items = apriori(basketp, min_support = 0.05, use_colnames = True)
 
# Collecting the inferred rules in a dataframe
rules = association_rules(frq_items, metric ="lift")
rules = rules.sort_values(['confidence', 'lift'], ascending =[False, False])
rules

"""##  Apriori Algorithm -  Category level"""

# Building the model
frq_items = apriori(basketc, min_support = 0.05, use_colnames = True)
 
# Collecting the inferred rules in a dataframe
rules = association_rules(frq_items, metric ="lift")
rules = rules.sort_values(['lift'], ascending =[False])
rules



